<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Mistaking Proofing</title>
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<!--mstheme--><link rel="stylesheet" type="text/css" href="_themes/copy-of-lss-theme/copy1011.css"><meta name="Microsoft Theme" content="copy-of-lss-theme 1011, default">
<meta name="Microsoft Border" content="tlb, default">
</head>

<body><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>




<p style="text-align: center">

<script language="JavaScript"><!--
MSFPhover = 
  (((navigator.appName == "Netscape") && 
  (parseInt(navigator.appVersion) >= 3 )) || 
  ((navigator.appName == "Microsoft Internet Explorer") && 
  (parseInt(navigator.appVersion) >= 4 ))); 
function MSFPpreload(img) 
{
  var a=new Image(); a.src=img; return a; 
}
// --></script><script language="JavaScript"><!--
if(MSFPhover) { MSFPnav1n=MSFPpreload("_derived/ext1073_cmp_radius010_hbtn.gif"); MSFPnav1h=MSFPpreload("_derived/ext1073_cmp_radius010_hbtn_a.gif"); }
// --></script><a href="../MainSite/index.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav1'].src=MSFPnav1h.src" onmouseout="if(MSFPhover) document['MSFPnav1'].src=MSFPnav1n.src"><img src="_derived/ext1073_cmp_radius010_hbtn.gif" width="140" height="40" border="0" alt="Main LSS Site" align="middle" name="MSFPnav1"></a></p>
<div align="center">
	<table border="0" width="580" height="81">
		<tr>
			<td height="81" width="216" bgcolor="#FFFFFF">
			<p style="text-align: center">
			<img border="0" src="_borders/banner2.gif" width="555" height="150"></td>
		</tr>
	</table>
	<p><font size="5">
	<script language="JavaScript"><!--
if(MSFPhover) { MSFPnav2n=MSFPpreload("_derived/Define_Phase.htm_cmp_radius010_hbtn.gif"); MSFPnav2h=MSFPpreload("_derived/Define_Phase.htm_cmp_radius010_hbtn_a.gif"); }
// --></script><a href="Define_Phase.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav2'].src=MSFPnav2h.src" onmouseout="if(MSFPhover) document['MSFPnav2'].src=MSFPnav2n.src"><img src="_derived/Define_Phase.htm_cmp_radius010_hbtn.gif" width="140" height="40" border="0" alt="Define" align="middle" name="MSFPnav2"></a> <script language="JavaScript"><!--
if(MSFPhover) { MSFPnav3n=MSFPpreload("_derived/Measure_Phase.htm_cmp_radius010_hbtn.gif"); MSFPnav3h=MSFPpreload("_derived/Measure_Phase.htm_cmp_radius010_hbtn_a.gif"); }
// --></script><a href="Measure_Phase.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav3'].src=MSFPnav3h.src" onmouseout="if(MSFPhover) document['MSFPnav3'].src=MSFPnav3n.src"><img src="_derived/Measure_Phase.htm_cmp_radius010_hbtn.gif" width="140" height="40" border="0" alt="Measure" align="middle" name="MSFPnav3"></a> <script language="JavaScript"><!--
if(MSFPhover) { MSFPnav4n=MSFPpreload("_derived/Analyze_Phase.htm_cmp_radius010_hbtn.gif"); MSFPnav4h=MSFPpreload("_derived/Analyze_Phase.htm_cmp_radius010_hbtn_a.gif"); }
// --></script><a href="Analyze_Phase.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav4'].src=MSFPnav4h.src" onmouseout="if(MSFPhover) document['MSFPnav4'].src=MSFPnav4n.src"><img src="_derived/Analyze_Phase.htm_cmp_radius010_hbtn.gif" width="140" height="40" border="0" alt="Analyze" align="middle" name="MSFPnav4"></a> <script language="JavaScript"><!--
if(MSFPhover) { MSFPnav5n=MSFPpreload("_derived/improve_phase.htm_cmp_radius010_hbtn.gif"); MSFPnav5h=MSFPpreload("_derived/improve_phase.htm_cmp_radius010_hbtn_a.gif"); }
// --></script><a href="improve_phase.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav5'].src=MSFPnav5h.src" onmouseout="if(MSFPhover) document['MSFPnav5'].src=MSFPnav5n.src"><img src="_derived/improve_phase.htm_cmp_radius010_hbtn.gif" width="140" height="40" border="0" alt="Improve" align="middle" name="MSFPnav5"></a> <script language="JavaScript"><!--
if(MSFPhover) { MSFPnav6n=MSFPpreload("_derived/control_phase.htm_cmp_radius010_hbtn.gif"); MSFPnav6h=MSFPpreload("_derived/control_phase.htm_cmp_radius010_hbtn_a.gif"); }
// --></script><a href="control_phase.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav6'].src=MSFPnav6h.src" onmouseout="if(MSFPhover) document['MSFPnav6'].src=MSFPnav6n.src"><img src="_derived/control_phase.htm_cmp_radius010_hbtn.gif" width="140" height="40" border="0" alt="Control" align="middle" name="MSFPnav6"></a> <script language="JavaScript"><!--
if(MSFPhover) { MSFPnav7n=MSFPpreload("_derived/sigma_Tools.htm_cmp_radius010_hbtn.gif"); MSFPnav7h=MSFPpreload("_derived/sigma_Tools.htm_cmp_radius010_hbtn_a.gif"); }
// --></script><a href="sigma_Tools.htm" language="JavaScript" onmouseover="if(MSFPhover) document['MSFPnav7'].src=MSFPnav7h.src" onmouseout="if(MSFPhover) document['MSFPnav7'].src=MSFPnav7n.src"><img src="_derived/sigma_Tools.htm_cmp_radius010_hbtn.gif" width="140" height="40" border="0" alt="Tool Index" align="middle" name="MSFPnav7"></a></font></div>

</td></tr><!--msnavigation--></table><!--msnavigation--><table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top" width="1%">


<p>&nbsp;</p>
<p>
</p>

</td><td valign="top" width="24"></td><!--msnavigation--><td valign="top">
<div id="containment">
	&nbsp;</div>
<div id="containment0">
	<div id="containment1">
		<div align="center">
		<table height="3012" cellSpacing="0" cellPadding="0" border="0" id="table1" width="610">
			<!-- MSTableType="layout" -->
			<tr>
				<td vAlign="top" align="left" height="3012" width="610">
				<table cellSpacing="0" cellPadding="0" border="0" id="table2">
					<tr>
						<td id="contentarea" vAlign="top" align="left" colSpan="2">
						<table cellSpacing="0" cellPadding="0" width="610" border="0" id="table3" height="3012">
							<!-- MSTableType="layout" -->
							<tr>
								<td class="maintext" vAlign="top" align="left" width="610" height="3012">
								<p class="orangehead">
								<u><b>
								<font color="#000000" size="5">
								Mistake-Proofing:</font></b></u></p>
								<p><font color="#000000">See example below</font></p>
								<p><font color="#000000">Also called: poka-yoke, 
								fail-safing </font></p>
								<p class="orangehead"><font color="#000000">
								Description </font></p>
								<p><font color="#000000">Mistake-proofing, or 
								its Japanese equivalent poka-yoke (pronounced 
								PO-ka yo-KAY), is the use of any automatic 
								device or method that either makes it impossible 
								for an error to occur or makes the error 
								immediately obvious once it has occurred. </font>
								</p>
								<p class="orangehead"><font color="#000000">When 
								to Use </font></p>
								<ul>
									<li><font color="#000000">When a process 
									step has been identified where human error 
									can cause mistakes or defects to occur, 
									especially in processes that rely on the 
									worker’s attention, skill or experience.
									</font></li>
									<li><font color="#000000">In a service 
									process, where the customer can make an 
									error which affects the output. </font></li>
									<li><font color="#000000">At a hand-off step 
									in a process, when output or (for service 
									processes) the customer is transferred to 
									another worker. </font></li>
									<li><font color="#000000">When a minor error 
									early in the process causes major problems 
									later in the process. </font></li>
									<li><font color="#000000">When the 
									consequences of an error are expensive or 
									dangerous. </font></li>
								</ul>
								<p class="orangehead"><font color="#000000">
								Procedure </font></p>
								<ul>
									<ol>
										<li><font color="#000000">Obtain or 
										create a <a target="_blank">flowchart</a> 
										of the process. Review each step, 
										thinking about where and when human 
										errors are likely to occur. </font></li>
										<li><font color="#000000">For each 
										potential error, work back through the 
										process to find its source. </font></li>
										<li><font color="#000000">For each 
										error, think of potential ways to make 
										it impossible for the error to occur. 
										Consider: </font>
										<ul>
											<li><font color="#000000">
											Elimination—eliminating the step 
											that causes the error. </font></li>
											<li><font color="#000000">
											Replacement—replacing the step with 
											an error-proof one. </font></li>
											<li><font color="#000000">
											Facilitation—making the correct 
											action far easier than the error.
											</font></li>
										</ul>
										</li>
										<li><font color="#000000">If you cannot 
										make it impossible for the error to 
										occur, think of ways to detect the error 
										and minimize its effects. Consider
										</font><a href="#inspection">
										<font color="#000000">inspection method</font></a><font color="#000000">,
										</font><a href="#setting">
										<font color="#000000">setting function</font></a><font color="#000000"> 
										and </font><a href="#regulatory">
										<font color="#000000">regulatory 
										function</font></a><font color="#000000">.
										</font></li>
										<li><font color="#000000">Choose the 
										best mistake-proofing method or device 
										for each error. Test it, then implement 
										it.<br>
										<br>
										Three kinds of inspection methods 
										provide rapid feedback: </font>
										<ul>
											<li><font color="#000000">Successive 
											inspection is done at the next step 
											of the process by the next worker.
											</font></li>
											<li><font color="#000000">
											Self-inspection means workers check 
											their own work immediately after 
											doing it. </font></li>
											<li><font color="#000000">Source 
											inspection checks, before the 
											process step takes place, that 
											conditions are correct. Often it’s 
											automatic and keeps the process from 
											proceeding until conditions are 
											right. </font></li>
										</ul>
										</li>
									</ol>
								</ul>
								<p><font color="#000000">Setting functions are 
								the methods by which a process parameter or 
								product attribute isinspected for errors: </font>
								</p>
								<ul>
									<li><font color="#000000">The contact or 
									physical method checks a physical 
									characteristic such as diameter or 
									temperature, often using a sensor. </font>
									</li>
									<li><font color="#000000">The motion-step or 
									sequencing method checks the process 
									sequence to make sure steps are done in 
									order. </font></li>
									<li><font color="#000000">The fixed-value or 
									grouping and counting method counts 
									repetitions or parts or weighs an item to 
									ensure completeness. </font></li>
									<li><font color="#000000">A fourth setting 
									function is sometimes added: information 
									enhancement. This makes sure information is 
									available and perceivable when and where 
									required. </font></li>
								</ul>
								<p><font color="#000000">Regulatory functions 
								are signals that alert the workers that an error 
								has occurred: </font></p>
								<ul>
									<li><font color="#000000">Warning functions 
									are bells, buzzers, lights and other sensory 
									signals. Consider using color-coding, 
									shapes, symbols and distinctive sounds.
									</font></li>
									<li><font color="#000000">Control functions 
									prevent the process from proceeding until 
									the error is corrected (if the error has 
									already taken place) or conditions are 
									correct (if the inspection was a source 
									inspection and the error has not yet 
									occurred). </font></li>
								</ul>
								<p class="orangehead"><font color="#000000">
								Example </font></p>
								<p><font color="#000000">The Parisian Experience 
								restaurant wished to ensure high service quality 
								through mistake-proofing. They reviewed the 
								deployment chart (a detailed flowchart that 
								shows who performs each step) of the seating 
								process shown in Figure 1 and identified human 
								errors on the part of restaurant staff or 
								customers that could cause service problems.
								</font></p>
								<p><font color="#000000"><strong>Figure 1</strong> 
								Restaurant’s deployment chart </font></p>
								<p align="center"><font color="#000000">
								<img alt="figure 1" src="images/mistake-proofing-fig1.gif" width="429" height="684"></font></p>
								<p><font color="#000000">The first potential 
								error occurs when customers enter. The maitre d’ 
								might not notice a customer is waiting if the 
								maitred’ is escorting other customers to their 
								table, checking on table status or conferring 
								with kitchen staff. </font></p>
								<p><font color="#000000">The mistake-proofing 
								device is an electronic sensor on the entrance 
								door. The sensor sends a signal to a vibrating 
								pager on the maitre’s belt to ensure that the 
								maitre d’ always knows when someone enters or 
								leaves the restaurant. Other mistake-proofing 
								methods replaced the process steps requiring the 
								maitre d’ to leave the front door to seat 
								customers. </font></p>
								<p><font color="#000000">A possible error on the 
								customers’ part was identified at the step when 
								diners are called from the lounge when their 
								table is ready. They might miss the call if the 
								lounge is noisy, if they are engrossed in 
								conversation or if they are hard-of-hearing.
								</font></p>
								<p><font color="#000000">The mistake-proofing 
								chosen by the team was to replace the step of 
								the process in which the maitre d’ called the 
								customer’s name over the loudspeaker. Instead, 
								during the greeting step, the maitre d’ notes a 
								unique visual identifier of one or more members 
								of the party. When the table is ready, the table 
								busser notifies the waiter, who comes to the 
								maitre d’ and learns how to identify the 
								customers. The waiter finds the customers in the 
								lounge, escorts them to their table, gives them 
								menus and takes additional drink orders. </font>
								</p>
								<p><font color="#000000">Not only does this 
								mistake-proofing method eliminate a 
								customer-caused problem, it improves the 
								restaurant ambiance by eliminating the annoying 
								loudspeaker, keeps the maitre d’ at the front 
								door to greet customers, creates a sense of 
								exceptional service when the waiter “magically” 
								knows the customers and eliminates additional 
								waiting time at the handoff between maitre d’ 
								and waiter. </font></td>
							</tr>
						</table>
						</td>
					</tr>
				</table>
				</td>
			</tr>
		</table>
		</div>
	</div>
</div><!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>

<h5 style="text-align: center">Last modified:
12/18/06 </h5>

</td></tr><!--msnavigation--></table></body>

</html>
